<?xml version="1.0"?>
<!--
    @see http://www.squizlabs.com/php-codesniffer/upgrading-for-1.3.0
-->
<ruleset name="Sxs">
    <description>Weltraumschafs coding standard</description>

    <!-- Reports errors if the same class or interface name is used in multiple files. -->
    <rule ref="Generic.Classes.DuplicateClassName"/>

    <!--
        This sniff class detected empty statement.

    * This sniff implements the common algorithm for empty statement body detection.
    * A body is considered as empty if it is completely empty or it only contains
    * whitespace characters and|or comments.
    *
    * <code>
    * stmt {
    *   // foo
    * }
    *
    * stmt (conditions) {
    *   // foo
    * }
    * </code>
    *
    * Statements covered by this sniff are <b>catch</b>, <b>do</b>, <b>else</b>,
    * <b>elsif</b>, <b>for</b>, <b>foreach<b>, <b>if</b>, <b>switch</b>, <b>try</b>
    * and <b>while</b>.
    -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement"/>
    <!--
    * Detects for-loops that can be simplified to a while-loop.
    *
    * This rule is based on the PMD rule catalog. Detects for-loops that can be
    * simplified as a while-loop.
    *
    * <code>
    * class Foo {
    *     public function bar($x) {
    *         for (;true;) true; // No Init or Update part, may as well be: while (true)
    *     }
    * }
    * </code>
    -->
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
    <!--
    * Detects for-loops that use a function call in the test expression.
    *
    * This rule is based on the PMD rule catalog. Detects for-loops that use a
    * function call in the test expression.
    *
    * <code>
    * class Foo {
    *     public function bar($x) {
    *         $a = array(1, 2, 3, 4);
    *
    *         for ($i = 0; $i < count($a); $i++) {
    *              $a[$i] *= $i;
    *         }
    *     }
    * }
    * </code>
    -->
    <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>
    <!--
    * Detects incrementer jumbling in for loops.
    *
    * This rule is based on the PMD rule catalog. The jumbling incrementer sniff
    * detects the usage of one and the same incrementer into an outer and an inner
    * loop. Even it is intended this is confusing code.
    *
    * <code>
    * class Foo {
    *     public function bar($x)  {
    *         for ($i = 0; $i < 10; $i++)  {
    *             for ($k = 0; $k < 20; $i++) {
    *                 echo 'Hello';
    *             }
    *         }
    *     }
    * }
    * </code>
    -->
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
    <!--
    * Detects unconditional if- and elseif-statements.
    *
    * This rule is based on the PMD rule catalog. The Unconditional If Statment
    * sniff detects statement conditions that are only set to one of the constant
    * values <b>true</b> or <b>false</b>
    *
    * <code>
    * class Foo {
    *     public function close() {
    *         if (true) {
    *             // ...
    *         }
    *     }
    * }
    * </code>
    -->
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
    <!--
    * Detects unnecessary final modifiers inside of final classes.
    *
    * This rule is based on the PMD rule catalog. The Unnecessary Final Modifier
    * sniff detects the use of the final modifier inside of a final class which
    * is unnecessary.
    *
    * <code>
    * final class Foo {
    *     public final function bar() {
    *     }
    * }
    * </code>
    -->
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
    <!--
    * Checks the for unused function parameters.
    *
    * This sniff checks that all function parameters are used in the function body.
    * One exception is made for empty function bodies or function bodies that only
    * contain comments. This could be usefull for the classes that implement an
    * interface that defines multiple methods but the implementation only needs some
    * of them.
    -->
    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>
    <!--
    * Detects unnecessary overriden methods that simply call their parent.
    *
    * This rule is based on the PMD rule catalog. The Useless Overriding Method
    * sniff detects the use of methods that only call their parent classes's method
    * with the same name and arguments. These methods are not required.
    *
    * <code>
    * class FooBar {
    *   public function __construct($a, $b) {
    *     parent::__construct($a, $b);
    *   }
    * }
    * </code>
    -->
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>


    <!--
    *  Verifies that inline control statements are not present.
    -->
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>

    <!--
    * Checks that end of line characters are correct.
    -->
    <rule ref="Generic.Files.LineEndings"/>

    <!--
    * Ensures each statement is on a line by itself.
    -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>

    <!--
    * Ensures there is a single space after cast tokens.
    -->
    <rule ref="Generic.Formatting.SpaceAfterCast"/>

    <!--
    * Checks that the opening brace of a function is on the same line
    * as the function declaration.
    -->
    <rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie"/>
    <!--
    * Ensures that variables are not passed by reference when calling a function.
    -->
    <rule ref="Generic.Functions.CallTimePassByReference"/>

    <!--
    * Checks the cyclomatic complexity (McCabe) for functions.
    *
    * The cyclomatic complexity (also called McCabe code metrics)
    * indicates the complexity within a function by counting
    * the different paths the function includes.
    -->
    <rule ref="Generic.Metrics.CyclomaticComplexity"/>
    <!--
    * Checks the nesting level for methods.
    -->
    <rule ref="Generic.Metrics.NestingLevel"/>

    <!--
    * Favor PHP 5 constructor syntax, which uses "function __construct()".
    * Avoid PHP 4 constructor syntax, which uses "function ClassName()".
    -->
    <rule ref="Generic.NamingConventions.ConstructorName"/>
    <!--
    * Ensures that constant names are all uppercase.
    -->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>

    <!--
    * Makes sure that shorthand PHP open tags are not used.
    -->
    <rule ref="Generic.PHP.DisallowShortOpenTag"/>
    <!--
    * Discourages the use of alias functions that are kept in PHP for compatibility
    * with older versions. Can be used to forbid the use of any function.
    *
    * 'sizeof' => 'count',
    * 'delete' => 'unset',
    -->
    <rule ref="Generic.PHP.ForbiddenFunctions"/>
    <!--
    * Checks that all uses of true, false and null are lowerrcase.
    -->
    <rule ref="Generic.PHP.LowerCaseConstant"/>

    <!--
    * Checks that two strings are not concatenated together; suggests
    * using one string instead.
    -->
    <rule ref="Generic.Strings.UnnecessaryStringConcat"/>

    <!-- WhiteSpace -->
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>
    <!--
    * Checks that control structures are structured correctly, and their content
    * is indented correctly. This sniff will throw errors if tabs are used
    * for indentation rather than spaces.
    -->
    <rule ref="Generic.WhiteSpace.ScopeIndent"/>
    <!-- Files -->
    <rule ref="Sxs.Files.LineLength"/>
    <!-- Classes -->
    <rule ref="Sxs.Classes.ClassDeclaration"/>
    <!-- NamingConventions -->
    <rule ref="Sxs.NamingConventions.ValidFunctionName"/>
    <rule ref="Sxs.NamingConventions.ValidVariableName"/>

    <!-- Commenting -->
    <rule ref="Sxs.Commenting.FileComment"/>
    <rule ref="Sxs.Commenting.ClassComment"/>
    <rule ref="PEAR.Commenting.FunctionComment"/>
    <rule ref="PEAR.Commenting.InlineComment"/>
    <!-- <rule ref="PEAR.ControlStructures.ControlSignature"/> -->
    <!-- <rule ref="PEAR.Functions.FunctionCallArgumentSpacing"/> -->
    <!-- <rule ref="PEAR.Functions.FunctionCallSignature"/> -->
    <!-- <rule ref="PEAR.Functions.ValidDefaultValue"/> -->
    <!-- <rule ref="PEAR.WhiteSpace.ScopeClosingBrace"/> -->

    <!-- Tests for functions outside of classes. -->
    <rule ref="Squiz.Functions.GlobalFunction"/>
    <rule ref="Squiz.Commenting.EmptyCatchComment"/>
    <rule ref="Zend.Files.ClosingTag"/>
</ruleset>